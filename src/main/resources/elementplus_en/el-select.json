{
  "name": "el-select",
  "attributes": [
    {
      "name": "model-value",
      "desc": "binding value",
      "type": "string / number / boolean / object / array",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "v-model",
      "desc": "binding value",
      "type": "string / number / boolean / object / array",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "multiple",
      "desc": "whether multiple-select is activated",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "disabled",
      "desc": "whether Select is disabled",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "value-key",
      "desc": "unique identity key name for value, required when value is an object",
      "type": "string",
      "optionValue": "",
      "options": [],
      "defaultValue": "value"
    },
    {
      "name": "size",
      "desc": "size of Input",
      "type": "enum",
      "optionValue": " | large | default | small",
      "options": [
        "large",
        "default",
        "small"
      ],
      "defaultValue": "—"
    },
    {
      "name": "clearable",
      "desc": "whether select can be cleared",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "collapse-tags",
      "desc": "whether to collapse tags to a text when multiple selecting",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "collapse-tags-tooltip ^(2.3.0)",
      "desc": "whether show all selected tags when mouse hover text of collapse-tags. To use this, collapse-tags must be true",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "multiple-limit",
      "desc": "maximum number of options user can select when multiple is true. No limit when set to 0",
      "type": "number",
      "optionValue": "",
      "options": [],
      "defaultValue": "0"
    },
    {
      "name": "name",
      "desc": "the name attribute of select input",
      "type": "string",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "effect",
      "desc": "tooltip theme, built-in theme: dark / light",
      "type": "enum",
      "optionValue": "dark | light",
      "options": [
        "dark",
        "light"
      ],
      "defaultValue": "light"
    },
    {
      "name": "autocomplete",
      "desc": "the autocomplete attribute of select input",
      "type": "string",
      "optionValue": "",
      "options": [],
      "defaultValue": "off"
    },
    {
      "name": "placeholder",
      "desc": "placeholder, default is 'Select'",
      "type": "string",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "filterable",
      "desc": "whether Select is filterable",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "allow-create",
      "desc": "whether creating new items is allowed. To use this, filterable must be true",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "filter-method",
      "desc": "custom filter method",
      "type": "Function",
      "optionValue": "() => void",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "remote",
      "desc": "whether options are loaded from server",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "remote-method",
      "desc": "custom remote search method",
      "type": "Function",
      "optionValue": "() => void",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "remote-show-suffix",
      "desc": "in remote search method show suffix icon",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "loading",
      "desc": "whether Select is loading data from server",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "loading-text",
      "desc": "displayed text while loading data from server, default is 'Loading'",
      "type": "string",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "no-match-text",
      "desc": "displayed text when no data matches the filtering query, you can also use slot empty, default is 'No matching data'",
      "type": "string",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "no-data-text",
      "desc": "displayed text when there is no options, you can also use slot empty, default is 'No data'",
      "type": "string",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "popper-class",
      "desc": "custom class name for Select's dropdown",
      "type": "string",
      "optionValue": "",
      "options": [],
      "defaultValue": ""
    },
    {
      "name": "reserve-keyword",
      "desc": "when multiple and filterable is true, whether to reserve current keyword after selecting an option",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "true"
    },
    {
      "name": "default-first-option",
      "desc": "select first matching option on enter key. Use with filterable or remote",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "teleported",
      "desc": "whether select dropdown is teleported, if true it will be teleported to where append-to sets",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "true"
    },
    {
      "name": "append-to ^(2.8.4)",
      "desc": "which element the select dropdown appends to",
      "type": "CSSSelector / HTMLElement",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "persistent",
      "desc": "when select dropdown is inactive and persistent is false, select dropdown will be destroyed",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "true"
    },
    {
      "name": "automatic-dropdown",
      "desc": "for non-filterable Select, this prop decides if the option menu pops up when the input is focused",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "clear-icon",
      "desc": "custom clear icon component",
      "type": "string / object",
      "optionValue": "Component",
      "options": [],
      "defaultValue": "CircleClose"
    },
    {
      "name": "fit-input-width",
      "desc": "whether the width of the dropdown is the same as the input",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "suffix-icon",
      "desc": "custom suffix icon component",
      "type": "string / object",
      "optionValue": "Component",
      "options": [],
      "defaultValue": "ArrowDown"
    },
    {
      "name": "tag-type",
      "desc": "tag type",
      "type": "enum",
      "optionValue": " | success | info | warning | danger",
      "options": [
        "success",
        "info",
        "warning",
        "danger"
      ],
      "defaultValue": "info"
    },
    {
      "name": "tag-effect ^(2.7.7)",
      "desc": "tag effect",
      "type": "enum",
      "optionValue": " | light | dark | plain",
      "options": [
        "light",
        "dark",
        "plain"
      ],
      "defaultValue": "light"
    },
    {
      "name": "validate-event",
      "desc": "whether to trigger form validation",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "true"
    },
    {
      "name": "offset ^(2.8.8)",
      "desc": "offset of the dropdown",
      "type": "number",
      "optionValue": "",
      "options": [],
      "defaultValue": "12"
    },
    {
      "name": "show-arrow ^(2.8.8)",
      "desc": "whether the dropdown has an arrow",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "true"
    },
    {
      "name": "placement ^(2.2.17)",
      "desc": "position of dropdown",
      "type": "enum",
      "optionValue": "top | top-start | top-end | bottom | bottom-start | bottom-end | left | left-start | left-end | right | right-start | right-end",
      "options": [
        "top",
        "top-start",
        "top-end",
        "bottom",
        "bottom-start",
        "bottom-end",
        "left",
        "left-start",
        "left-end",
        "right",
        "right-start",
        "right-end"
      ],
      "defaultValue": "bottom-start"
    },
    {
      "name": "fallback-placements ^(2.5.6)",
      "desc": "<p>list of possible positions for dropdown <a href=\"https://popper.js.org/docs/v2/modifiers/flip/#fallbackplacements\">popper.js</a></p>",
      "type": "array",
      "optionValue": "Placement[]",
      "options": [],
      "defaultValue": "[bottom-start, top-start, right, left]"
    },
    {
      "name": "max-collapse-tags ^(2.3.0)",
      "desc": "the max tags number to be shown. To use this, collapse-tags must be true",
      "type": "number",
      "optionValue": "",
      "options": [],
      "defaultValue": "1"
    },
    {
      "name": "popper-options",
      "desc": "<p><a href=\"https://popper.js.org/docs/v2/\">popper.js</a> parameters</p>",
      "type": "objectrefer to [popper.js(https://popper.js.org/docs/v2/) doc",
      "optionValue": "",
      "options": [],
      "defaultValue": "{}"
    },
    {
      "name": "aria-label ^(a11y)",
      "desc": "same as aria-label in native input",
      "type": "string",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "empty-values ^(2.7.0)",
      "desc": "empty values of component, [see config-provider](/en-US/component/config-provider#empty-values-configurations)",
      "type": "array",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "value-on-clear ^(2.7.0)",
      "desc": "clear return value, [see config-provider](/en-US/component/config-provider#empty-values-configurations)",
      "type": "string / number / boolean / Function",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "suffix-transition ^(deprecated)",
      "desc": "animation when dropdown appears/disappears icon",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "true"
    },
    {
      "name": "tabindex ^(2.9.0)",
      "desc": "tabindex for input",
      "type": "string / number",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    }
  ],
  "props": [],
  "options": [],
  "shortcuts": [],
  "slots": [
    {
      "name": "default",
      "desc": "option component list"
    },
    {
      "name": "header ^(2.4.3)",
      "desc": "content at the top of the dropdown"
    },
    {
      "name": "footer ^(2.4.3)",
      "desc": "content at the bottom of the dropdown"
    },
    {
      "name": "prefix",
      "desc": "content as Select prefix"
    },
    {
      "name": "empty",
      "desc": "content when there is no options"
    },
    {
      "name": "tag ^(2.5.0)",
      "desc": "content as Select tag"
    },
    {
      "name": "loading ^(2.5.2)",
      "desc": "content as Select loading"
    },
    {
      "name": "label ^(2.7.4)",
      "desc": "content as Select label"
    }
  ],
  "events": [
    {
      "name": "@change",
      "desc": "triggers when the selected value changes",
      "param": "Function(value: any) => void"
    },
    {
      "name": "@visible-change",
      "desc": "triggers when the dropdown appears/disappears",
      "param": "Function(visible: boolean) => void"
    },
    {
      "name": "@remove-tag",
      "desc": "triggers when a tag is removed in multiple mode",
      "param": "Function(tagValue: any) => void"
    },
    {
      "name": "@clear",
      "desc": "triggers when the clear icon is clicked in a clearable Select",
      "param": "Function() => void"
    },
    {
      "name": "@blur",
      "desc": "triggers when Input blurs",
      "param": "Function(event: FocusEvent) => void"
    },
    {
      "name": "@focus",
      "desc": "triggers when Input focuses",
      "param": "Function(event: FocusEvent) => void"
    },
    {
      "name": "@popup-scroll ^(2.9.4)",
      "desc": "triggers when dropdown scrolls",
      "param": "Function(data:{scrollTop: number, scrollLeft: number}) => void"
    }
  ],
  "methods": [
    {
      "name": "focus",
      "desc": "focus the Input component",
      "param": "Function() => void"
    },
    {
      "name": "blur",
      "desc": "blur the Input component, and hide the dropdown",
      "param": "Function() => void"
    },
    {
      "name": "selectedLabel ^(2.8.5)",
      "desc": "get the currently selected label",
      "param": "objectComputedRef<string | string[>"
    }
  ]
}