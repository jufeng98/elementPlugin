{
  "name": "el-cascader",
  "attributes": [
    {
      "name": "model-value",
      "desc": "binding value",
      "type": "string/number/object",
      "optionValue": "string[] | number[] | any",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "v-model",
      "desc": "binding value",
      "type": "string/number/object",
      "optionValue": "string[] | number[] | any",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "options",
      "desc": "data of the options, the key of value and label can be customize by CascaderProps.",
      "type": "object",
      "optionValue": "Record<string, unknown>[]",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "props",
      "desc": "configuration options, see the following CascaderProps table.",
      "type": "object",
      "optionValue": "CascaderProps",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "size",
      "desc": "size of input",
      "type": "enum",
      "optionValue": "large | default | small",
      "options": [
        "large",
        "default",
        "small"
      ],
      "defaultValue": "—"
    },
    {
      "name": "placeholder",
      "desc": "placeholder of input",
      "type": "string",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "disabled",
      "desc": "whether Cascader is disabled",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "clearable",
      "desc": "whether selected value can be cleared",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "show-all-levels",
      "desc": "whether to display all levels of the selected value in the input",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "true"
    },
    {
      "name": "collapse-tags",
      "desc": "whether to collapse tags in multiple selection mode",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "collapse-tags-tooltip",
      "desc": "whether show all selected tags when mouse hover text of collapse-tags. To use this, collapse-tags must be true",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "separator",
      "desc": "option label separator",
      "type": "string",
      "optionValue": "",
      "options": [],
      "defaultValue": " / "
    },
    {
      "name": "filterable",
      "desc": "whether the options can be searched",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "filter-method",
      "desc": "customize search logic, the first parameter is node, the second is keyword, and need return a boolean value indicating whether it hits.",
      "type": "Function",
      "optionValue": "(node: CascaderNode, keyword: string) => boolean",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "debounce",
      "desc": "debounce delay when typing filter keyword, in milliseconds",
      "type": "number",
      "optionValue": "",
      "options": [],
      "defaultValue": "300"
    },
    {
      "name": "before-filter",
      "desc": "hook function before filtering with the value to be filtered as its parameter. If false is returned or a Promise is returned and then is rejected, filtering will be aborted",
      "type": "Function",
      "optionValue": "(value: string) => boolean",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "popper-class",
      "desc": "custom class name for Cascader's dropdown",
      "type": "string",
      "optionValue": "",
      "options": [],
      "defaultValue": ""
    },
    {
      "name": "teleported",
      "desc": "whether cascader popup is teleported",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "true"
    },
    {
      "name": "tag-type",
      "desc": "tag type",
      "type": "enum",
      "optionValue": "success | info | warning | danger",
      "options": [
        "success",
        "info",
        "warning",
        "danger"
      ],
      "defaultValue": "info"
    },
    {
      "name": "tag-effect",
      "desc": "tag effect(2.7.8)",
      "type": "enum",
      "optionValue": "light | dark | plain",
      "options": [
        "light",
        "dark",
        "plain"
      ],
      "defaultValue": "light"
    },
    {
      "name": "validate-event",
      "desc": "whether to trigger form validation",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "true"
    },
    {
      "name": "max-collapse-tags",
      "desc": "The max tags number to be shown. To use this, collpase-tags must be true(2.3.10)",
      "type": "number",
      "optionValue": "",
      "options": [],
      "defaultValue": "1"
    },
    {
      "name": "empty-values",
      "desc": "empty values of component, [see config-provider](/en-US/component/config-provider#empty-values-configurations)(2.7.0)",
      "type": "array",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "value-on-clear",
      "desc": "clear return value, [see config-provider](/en-US/component/config-provider#empty-values-configurations)(2.7.0)",
      "type": "string / number / boolean / Function",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "persistent",
      "desc": "when dropdown is inactive and persistent is false, dropdown will be destroyed(2.7.8)",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "true"
    },
    {
      "name": "fallback-placements",
      "desc": "<p>list of possible positions for Tooltip <a href=\"https://popper.js.org/docs/v2/modifiers/flip/#fallbackplacements\">popper.js</a>(2.8.1)</p>",
      "type": "arrary",
      "optionValue": "Placement[]",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "placement",
      "desc": "position of dropdown(2.8.1)",
      "type": "enum",
      "optionValue": "top | top-start | top-end | bottom | bottom-start | bottom-end | left | left-start | left-end | right | right-start | right-end",
      "options": [
        "top",
        "top-start",
        "top-end",
        "bottom",
        "bottom-start",
        "bottom-end",
        "left",
        "left-start",
        "left-end",
        "right",
        "right-start",
        "right-end"
      ],
      "defaultValue": "bottom-start"
    },
    {
      "name": "popper-append-to-body",
      "desc": "whether to append the popper menu to body. If the positioning of the popper is wrong, you can try to set this prop to false(deprecated)",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "true"
    }
  ],
  "props": [
    {
      "name": "expandTrigger",
      "desc": "trigger mode of expanding options",
      "type": "enum",
      "optionValue": "click | hover",
      "options": [
        "click",
        "hover"
      ],
      "defaultValue": "click"
    },
    {
      "name": "multiple",
      "desc": "whether multiple selection is enabled",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "checkStrictly",
      "desc": "whether checked state of a node not affects its parent and child nodes",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "emitPath",
      "desc": "when checked nodes change, whether to emit an array of node's path, if false, only emit the value of node.",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "true"
    },
    {
      "name": "lazy",
      "desc": "whether to dynamic load child nodes, use with lazyload attribute",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "lazyLoad",
      "desc": "method for loading child nodes data, only works when lazy is true",
      "type": "Function",
      "optionValue": "(node: Node, resolve: Resolve) => void",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "value",
      "desc": "specify which key of node object is used as the node's value",
      "type": "string",
      "optionValue": "",
      "options": [],
      "defaultValue": "value"
    },
    {
      "name": "label",
      "desc": "specify which key of node object is used as the node's label",
      "type": "string",
      "optionValue": "",
      "options": [],
      "defaultValue": "label"
    },
    {
      "name": "children",
      "desc": "specify which key of node object is used as the node's children",
      "type": "string",
      "optionValue": "",
      "options": [],
      "defaultValue": "children"
    },
    {
      "name": "disabled",
      "desc": "specify which key of node object is used as the node's disabled",
      "type": "string",
      "optionValue": "",
      "options": [],
      "defaultValue": "disabled"
    },
    {
      "name": "leaf",
      "desc": "specify which key of node object is used as the node's leaf field",
      "type": "string",
      "optionValue": "",
      "options": [],
      "defaultValue": "leaf"
    },
    {
      "name": "hoverThreshold",
      "desc": "hover threshold of expanding options",
      "type": "number",
      "optionValue": "",
      "options": [],
      "defaultValue": "500"
    }
  ],
  "options": [],
  "shortcuts": [],
  "slots": [
    {
      "name": "default",
      "desc": "the custom content of cascader node, which are current Node object and node data respectively."
    },
    {
      "name": "empty",
      "desc": "content when there is no matched options."
    },
    {
      "name": "prefix ^(2.9.4)",
      "desc": "content as Input prefix"
    },
    {
      "name": "suggestion-item ^(2.9.5)",
      "desc": "custom content for suggestion item when searching"
    }
  ],
  "events": [
    {
      "name": "@change",
      "desc": "triggers when the binding value changes",
      "param": "Function(value: CascaderValue) => void"
    },
    {
      "name": "@expand-change",
      "desc": "triggers when expand option changes",
      "param": "Function(value: CascaderValue) => void"
    },
    {
      "name": "@blur",
      "desc": "triggers when Cascader blurs",
      "param": "Function(event: FocusEvent) => void"
    },
    {
      "name": "@focus",
      "desc": "triggers when Cascader focuses",
      "param": "Function(event: FocusEvent) => void"
    },
    {
      "name": "@clear",
      "desc": "triggers when the clear icon is clicked in a clearable Select(2.7.7)",
      "param": "Function() => void"
    },
    {
      "name": "@visible-change",
      "desc": "triggers when the dropdown appears/disappears",
      "param": "Function(value: boolean) => void"
    },
    {
      "name": "@remove-tag",
      "desc": "triggers when remove tag in multiple selection mode",
      "param": "Function(value: CascaderNode[valueByOption) => void"
    }
  ],
  "methods": [
    {
      "name": "getCheckedNodes",
      "desc": "get an array of currently selected node,(leafOnly) whether only return the leaf checked nodes, default is `false`",
      "param": "Function(leafOnly: boolean) => CascaderNode[ | undefined"
    },
    {
      "name": "cascaderPanelRef",
      "desc": "cascader panel ref",
      "param": "objectComputedRef<any>"
    },
    {
      "name": "togglePopperVisible",
      "desc": "toggle the visible type of popper(2.2.31)",
      "param": "Function(visible?: boolean) => void"
    },
    {
      "name": "contentRef",
      "desc": "cascader content ref",
      "param": "objectComputedRef<any>"
    },
    {
      "name": "presentText",
      "desc": "selected content text(2.8.4)",
      "param": "objectComputedRef<string>"
    }
  ]
}