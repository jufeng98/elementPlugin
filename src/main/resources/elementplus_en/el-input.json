{
  "name": "el-input",
  "attributes": [
    {
      "name": "type",
      "desc": "type of input",
      "type": "string",
      "optionValue": "text | textarea | password | button | checkbox | file | number | radio | ...",
      "options": [
        "text",
        "textarea",
        "password",
        "button",
        "checkbox",
        "file",
        "number",
        "radio",
        "..."
      ],
      "defaultValue": "text"
    },
    {
      "name": "model-value",
      "desc": "binding value",
      "type": "string / number",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "v-model",
      "desc": "binding value",
      "type": "string / number",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "maxlength",
      "desc": "same as maxlength in native input",
      "type": "string / number",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "minlength",
      "desc": "same as minlength in native input",
      "type": "string / number",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "show-word-limit",
      "desc": "whether show word count, only works when type is 'text' or 'textarea'",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "placeholder",
      "desc": "placeholder of Input",
      "type": "string",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "clearable",
      "desc": "whether to show clear button, only works when type is not 'textarea'",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "formatter",
      "desc": "specifies the format of the value presented input.(only works when type is 'text')",
      "type": "Function",
      "optionValue": "(value: string | number) => string",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "parser",
      "desc": "specifies the value extracted from formatter input.(only works when type is 'text')",
      "type": "Function",
      "optionValue": "(value: string) => string",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "show-password",
      "desc": "whether to show toggleable password input",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "disabled",
      "desc": "whether Input is disabled",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "size",
      "desc": "size of Input, works when type is not 'textarea'",
      "type": "enum",
      "optionValue": "large | default | small",
      "options": [
        "large",
        "default",
        "small"
      ],
      "defaultValue": "—"
    },
    {
      "name": "prefix-icon",
      "desc": "prefix icon component",
      "type": "string / Component",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "suffix-icon",
      "desc": "suffix icon component",
      "type": "string / Component",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "rows",
      "desc": "number of rows of textarea, only works when type is 'textarea'",
      "type": "number",
      "optionValue": "",
      "options": [],
      "defaultValue": "2"
    },
    {
      "name": "autosize",
      "desc": "whether textarea has an adaptive height, only works when type is 'textarea'. Can accept an object, e.g. { minRows: 2, maxRows: 6 }",
      "type": "boolean / object",
      "optionValue": "{ minRows?: number, maxRows?: number }",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "autocomplete",
      "desc": "same as autocomplete in native input",
      "type": "string",
      "optionValue": "",
      "options": [],
      "defaultValue": "off"
    },
    {
      "name": "name",
      "desc": "same as name in native input",
      "type": "string",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "readonly",
      "desc": "same as readonly in native input",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "max",
      "desc": "same as max in native input",
      "type": "—",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "min",
      "desc": "same as min in native input",
      "type": "—",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "step",
      "desc": "same as step in native input",
      "type": "—",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "resize",
      "desc": "control the resizability",
      "type": "enum",
      "optionValue": "none | both | horizontal | vertical",
      "options": [
        "none",
        "both",
        "horizontal",
        "vertical"
      ],
      "defaultValue": "—"
    },
    {
      "name": "autofocus",
      "desc": "same as autofocus in native input",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "form",
      "desc": "same as form in native input",
      "type": "",
      "optionValue": "string",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "aria-label",
      "desc": "same as aria-label in native input(a11y) (2.7.2)",
      "type": "string",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "tabindex",
      "desc": "input tabindex",
      "type": "string / number",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "validate-event",
      "desc": "whether to trigger form validation",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "true"
    },
    {
      "name": "input-style",
      "desc": "the style of the input element or textarea element",
      "type": "string / object",
      "optionValue": "CSSProperties | CSSProperties[] | string[]",
      "options": [],
      "defaultValue": "{}"
    },
    {
      "name": "label",
      "desc": "same as aria-label in native input(a11y) (deprecated)",
      "type": "string",
      "optionValue": "",
      "options": [],
      "defaultValue": "—"
    }
  ],
  "props": [],
  "options": [],
  "shortcuts": [],
  "slots": [
    {
      "name": "prefix",
      "desc": "content as Input prefix, only works when `type` is not 'textarea'"
    },
    {
      "name": "suffix",
      "desc": "content as Input suffix, only works when `type` is not 'textarea'"
    },
    {
      "name": "prepend",
      "desc": "content to prepend before Input, only works when `type` is not 'textarea'"
    },
    {
      "name": "append",
      "desc": "content to append after Input, only works when `type` is not 'textarea'"
    }
  ],
  "events": [
    {
      "name": "@blur",
      "desc": "triggers when Input blurs",
      "param": "Function(event: FocusEvent) => void"
    },
    {
      "name": "@focus",
      "desc": "triggers when Input focuses",
      "param": "Function(event: FocusEvent) => void"
    },
    {
      "name": "@change",
      "desc": "triggers when the input box loses focus or the user presses Enter, only if the modelValue has changed",
      "param": "Function(value: string | number) => void"
    },
    {
      "name": "@input",
      "desc": "triggers when the Input value change",
      "param": "Function(value: string | number) => void"
    },
    {
      "name": "@clear",
      "desc": "triggers when the Input is cleared by clicking the clear button",
      "param": "Function() => void"
    }
  ],
  "methods": [
    {
      "name": "blur",
      "desc": "blur the input element",
      "param": "Function() => void"
    },
    {
      "name": "clear",
      "desc": "clear input value",
      "param": "Function() => void"
    },
    {
      "name": "focus",
      "desc": "focus the input element",
      "param": "Function() => void"
    },
    {
      "name": "input",
      "desc": "HTML input element",
      "param": "objectRef<HTMLInputElement>"
    },
    {
      "name": "ref",
      "desc": "HTML element, input or textarea",
      "param": "objectRef<HTMLInputElement | HTMLTextAreaElement>"
    },
    {
      "name": "resizeTextarea",
      "desc": "resize textarea",
      "param": "Function() => void"
    },
    {
      "name": "select",
      "desc": "select the text in input element",
      "param": "Function() => void"
    },
    {
      "name": "textarea",
      "desc": "HTML textarea element",
      "param": "objectRef<HTMLTextAreaElement>"
    },
    {
      "name": "textareaStyle",
      "desc": "style of textarea",
      "param": "objectRef<StyleValue>"
    },
    {
      "name": "isComposing",
      "desc": "is input composing(2.8.0)",
      "param": "objectRef<boolean>"
    }
  ]
}