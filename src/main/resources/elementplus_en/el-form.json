{
  "name": "el-form",
  "attributes": [
    {
      "name": "model",
      "desc": "Data of form component.",
      "type": "object",
      "optionValue": "Record<string, any>",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "rules",
      "desc": "Validation rules of form.",
      "type": "object",
      "optionValue": "FormRules",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "inline",
      "desc": "Whether the form is inline.",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "label-position",
      "desc": "Position of label. If set to 'left' or 'right', label-width prop is also required.",
      "type": "enum",
      "optionValue": "left | right | top",
      "options": [
        "left",
        "right",
        "top"
      ],
      "defaultValue": "right"
    },
    {
      "name": "label-width",
      "desc": "Width of label, e.g. '50px'. All its direct child form items will inherit this value. auto is supported.",
      "type": "string / number",
      "optionValue": "",
      "options": [],
      "defaultValue": ""
    },
    {
      "name": "label-suffix",
      "desc": "Suffix of the label.",
      "type": "string",
      "optionValue": "",
      "options": [],
      "defaultValue": ""
    },
    {
      "name": "hide-required-asterisk",
      "desc": "Whether to hide required fields should have a red asterisk (star) beside their labels.",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "require-asterisk-position",
      "desc": "Position of asterisk.",
      "type": "enum",
      "optionValue": "left | right",
      "options": [
        "left",
        "right"
      ],
      "defaultValue": "left"
    },
    {
      "name": "show-message",
      "desc": "Whether to show the error message.",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "true"
    },
    {
      "name": "inline-message",
      "desc": "Whether to display the error message inline with the form item.",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "status-icon",
      "desc": "Whether to display an icon indicating the validation result.",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "validate-on-rule-change",
      "desc": "Whether to trigger validation when the rules prop is changed.",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "true"
    },
    {
      "name": "size",
      "desc": "Control the size of components in this form.",
      "type": "enum",
      "optionValue": " | large | default | small",
      "options": [
        "large",
        "default",
        "small"
      ],
      "defaultValue": "—"
    },
    {
      "name": "disabled",
      "desc": "Whether to disable all components in this form. If set to true, it will override the disabled prop of the inner component.",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "scroll-to-error",
      "desc": "When validation fails, scroll to the first error form entry.",
      "type": "boolean",
      "optionValue": "",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "scroll-into-view-options",
      "desc": "<p>When validation fails, it scrolls to the first error item based on the scrollIntoView option. <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView\">scrollIntoView</a>.(2.3.2)</p>",
      "type": "object",
      "optionValue": "Record<string, any>",
      "options": [],
      "defaultValue": "—"
    }
  ],
  "props": [],
  "options": [],
  "shortcuts": [],
  "slots": [
    {
      "name": "default",
      "desc": "customize default content"
    }
  ],
  "events": [
    {
      "name": "@validate",
      "desc": "triggers after a form item is validated",
      "param": "Function(prop: FormItemProp, isValid: boolean, message: string) => void"
    }
  ],
  "methods": [
    {
      "name": "validate",
      "desc": "Validate the whole form. Receives a callback or returns `Promise`.",
      "param": "Function(callback?: FormValidateCallback) => Promise<void>"
    },
    {
      "name": "validateField",
      "desc": "Validate specified fields.",
      "param": "Function(props?: Arrayable<FormItemProp> | undefined, callback?: FormValidateCallback | undefined) => FormValidationResult"
    },
    {
      "name": "resetFields",
      "desc": "Reset specified fields and remove validation result.",
      "param": "Function(props?: Arrayable<FormItemProp> | undefined) => void"
    },
    {
      "name": "scrollToField",
      "desc": "Scroll to the specified fields.",
      "param": "Function(prop: FormItemProp) => void"
    },
    {
      "name": "clearValidate",
      "desc": "Clear validation messages for all or specified fields.",
      "param": "Function(props?: Arrayable<FormItemProp> | undefined) => void"
    },
    {
      "name": "fields",
      "desc": "Get all fields context.(2.7.3)",
      "param": "arrayFormItemContext["
    }
  ]
}