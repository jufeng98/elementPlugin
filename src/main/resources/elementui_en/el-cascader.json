{
  "name": "el-cascader",
  "attributes": [
    {
      "name": "value",
      "desc": "binding value",
      "type": "-",
      "optionValue": "—",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "v-model",
      "desc": "binding value",
      "type": "-",
      "optionValue": "—",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "options",
      "desc": "data of the options，the key of `value` and `label` can be customize by `Props`.",
      "type": "array",
      "optionValue": "—",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "props",
      "desc": "configuration options, see the following table.",
      "type": "object",
      "optionValue": "—",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "size",
      "desc": "size of input",
      "type": "string",
      "optionValue": "medium / small / mini",
      "options": [
        "medium",
        "small",
        "mini"
      ],
      "defaultValue": "—"
    },
    {
      "name": "placeholder",
      "desc": "placeholder of input",
      "type": "string",
      "optionValue": "—",
      "options": [],
      "defaultValue": "Select"
    },
    {
      "name": "disabled",
      "desc": "whether Cascader is disabled",
      "type": "boolean",
      "optionValue": "—",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "clearable",
      "desc": "whether selected value can be cleared",
      "type": "boolean",
      "optionValue": "—",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "show-all-levels",
      "desc": "whether to display all levels of the selected value in the input",
      "type": "boolean",
      "optionValue": "—",
      "options": [],
      "defaultValue": "true"
    },
    {
      "name": "collapse-tags",
      "desc": "whether to collapse tags in multiple selection mode",
      "type": "boolean",
      "optionValue": "-",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "separator",
      "desc": "option label separator",
      "type": "string",
      "optionValue": "—",
      "options": [],
      "defaultValue": "' / '"
    },
    {
      "name": "filterable",
      "desc": "whether the options can be searched",
      "type": "boolean",
      "optionValue": "—",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "filter-method",
      "desc": "customize search logic, the first parameter is `node`, the second is `keyword`, and need return a boolean value indicating whether it hits.",
      "type": "function(node, keyword)",
      "optionValue": "-",
      "options": [],
      "defaultValue": "-"
    },
    {
      "name": "debounce",
      "desc": "debounce delay when typing filter keyword, in milliseconds",
      "type": "number",
      "optionValue": "—",
      "options": [],
      "defaultValue": "300"
    },
    {
      "name": "before-filter",
      "desc": "hook function before filtering with the value to be filtered as its parameter. If `false` is returned or a `Promise` is returned and then is rejected, filtering will be aborted",
      "type": "function(value)",
      "optionValue": "—",
      "options": [],
      "defaultValue": "—"
    },
    {
      "name": "popper-class",
      "desc": "custom class name for Cascader's dropdown",
      "type": "string",
      "optionValue": "—",
      "options": [],
      "defaultValue": "—"
    }
  ],
  "props": [
    {
      "name": "expandTrigger",
      "desc": "trigger mode of expanding options",
      "type": "string",
      "optionValue": "click / hover",
      "options": [
        "click",
        "hover"
      ],
      "defaultValue": "'click'"
    },
    {
      "name": "multiple",
      "desc": "whether multiple selection is enabled",
      "type": "boolean",
      "optionValue": "-",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "checkStrictly",
      "desc": "whether checked state of a node not affects its parent and child nodes",
      "type": "boolean",
      "optionValue": "-",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "emitPath",
      "desc": "when checked nodes change, whether to emit an array of node's path, if false, only emit the value of node.",
      "type": "boolean",
      "optionValue": "-",
      "options": [],
      "defaultValue": "true"
    },
    {
      "name": "lazy",
      "desc": "whether to dynamic load child nodes, use with `lazyload` attribute",
      "type": "boolean",
      "optionValue": "-",
      "options": [],
      "defaultValue": "false"
    },
    {
      "name": "lazyLoad",
      "desc": "method for loading child nodes data, only works when `lazy` is true",
      "type": "function(node, resolve)",
      "optionValue": "-",
      "options": [],
      "defaultValue": "-"
    },
    {
      "name": "value",
      "desc": "specify which key of node object is used as the node's value",
      "type": "string",
      "optionValue": "—",
      "options": [],
      "defaultValue": "'value'"
    },
    {
      "name": "label",
      "desc": "specify which key of node object is used as the node's label",
      "type": "string",
      "optionValue": "—",
      "options": [],
      "defaultValue": "'label'"
    },
    {
      "name": "children",
      "desc": "specify which key of node object is used as the node's children",
      "type": "string",
      "optionValue": "—",
      "options": [],
      "defaultValue": "'children'"
    },
    {
      "name": "disabled",
      "desc": "specify which key of node object is used as the node's disabled",
      "type": "string",
      "optionValue": "—",
      "options": [],
      "defaultValue": "'disabled'"
    },
    {
      "name": "leaf",
      "desc": "specify which key of node object is used as the node's leaf field",
      "type": "string",
      "optionValue": "—",
      "options": [],
      "defaultValue": "'leaf'"
    }
  ],
  "options": [],
  "shortcuts": [],
  "slots": [
    {
      "name": "-",
      "desc": "the custom content of cascader node, the parameter is { node, data }, which are current Node object and node data respectively."
    },
    {
      "name": "empty",
      "desc": "content when there is no matched options."
    }
  ],
  "events": [
    {
      "name": "@change",
      "desc": "triggers when the binding value changes",
      "param": "value"
    },
    {
      "name": "@expand-change",
      "desc": "triggers when expand option changes",
      "param": "an array of the expanding node's parent nodes"
    },
    {
      "name": "@blur",
      "desc": "triggers when Cascader blurs",
      "param": "(event: Event)"
    },
    {
      "name": "@focus",
      "desc": "triggers when Cascader focuses",
      "param": "(event: Event)"
    },
    {
      "name": "@visible-change",
      "desc": "triggers when the dropdown appears/disappears",
      "param": "true when it appears, and false otherwise"
    },
    {
      "name": "@remove-tag",
      "desc": "triggers when remove tag in multiple selection mode",
      "param": "the value of the tag which is removed"
    }
  ],
  "methods": [
    {
      "name": "getCheckedNodes",
      "desc": "get an array of currently selected node",
      "param": "(leafOnly) whether only return the leaf checked nodes, default is `false`"
    }
  ]
}